

import re

def parse_nmap_output(target: str, output: str, tool: str = "nmap") -> dict:
    """
    Parses raw Nmap output text into structured JSON.
    """
    # Extract IP
    ip_match = re.search(r"\(([\d\.]+)\)", output)
    ip = ip_match.group(1) if ip_match else None

    # Extract other addresses
    other_addrs_match = re.search(r"Other addresses for .*: (.+)", output)
    other_addresses = other_addrs_match.group(1).split() if other_addrs_match else []

    # Extract latency
    latency_match = re.search(r"Host is up \(([\d\.]+s) latency\)", output)
    latency = latency_match.group(1) if latency_match else None

    # Extract number of closed ports
    closed_match = re.search(r"Not shown: (\d+) closed", output)
    closed_ports = int(closed_match.group(1)) if closed_match else 0

    # Extract scanned ports
    ports = []
    for line in output.splitlines():
        match = re.match(r"(\d+)/tcp\s+(\w+)\s+(\w+)", line)
        if match:
            port, state, service = match.groups()
            ports.append({
                "port": int(port),
                "protocol": "tcp",
                "state": state,
                "service": service
            })

    # Extract scan duration
    duration_match = re.search(r"scanned in ([\d\.]+) seconds", output)
    scan_duration = float(duration_match.group(1)) if duration_match else None

    # Build structured result
    return {
        "ok": True,
        "tool": tool,
        "result": {
            "target": target,
            "ip": ip,
            "other_addresses": other_addresses,
            "latency": latency,
            "ports": ports,
            "summary": {
                "closed_ports": closed_ports,
                "scan_duration_seconds": scan_duration,
                "hosts_up": 1
            }
        }
    }
